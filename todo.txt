create a python env and run python files from env
update citations

pose_estimation:
- change the webcam name instead of dynamic number
- webcam read fps: 5. Decide a aruco_poses pulishing and frame rate
- remove waitkey(1) and imshow?
- better logic for ProjectGoalPose?
- draw yaw angle directions and range
- implement ov object detection to obtain obstacles bounding boxes
- segment manipulating object
- small object (box, differnt weight, t, rectangle, barral)
- recording code for experiments 

centroid planning/gtsam:
- decide publishing rate for ROS2Nodes, logic to switch in velocityPublisher, start these nodes
- change gactor graph to consider obstacles bounding boxes from BBOX
- contruct fg for switch mode trajectories
- overlay arrows from current pose to goal
- check time for translation/rotation
- check ensure angle range
- Complete optimizer.h code

action-planning/vlm_model:
- ToDo: TIMING/ DESCRITIZATION OF PATH/ when to query VLM?
- VLM call: 
    - robot always faces normal to object. Compare manipulation direction with positioning of robots around objects and the resultant force. Action switch required? 
    - define high level switch_contact_points actions: right-centre, right-left, right-right, left-centre, left-left, left-right
    - How to asses scene obstacles/weight/friction into account?
- Low level controller each hl actions? 
        - use Box 60.2*65.2 dimension to generate switch_contacts action trajectory->velocity commands.
        - ROS2 cmd_vel with constant vel (1.0) and sleep (Ts_translation). Test how long does the specific box move.

README.md:
update requirements file for python
update c++ packages requirements

VLM Advantages:
- obstacles/scene
- different weight and shape of manipulating object